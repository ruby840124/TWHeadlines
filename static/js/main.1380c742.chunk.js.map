{"version":3,"sources":["Newscontent.js","Main.js","serviceWorker.js","index.js"],"names":["Newscontent","props","articles","this","timeArray","map","val","currentDate","publishedAt","JSON","stringify","MM","Date","parse","getMonth","substr","dd","getDate","h","getHours","m","getMinutes","s","getSeconds","Time","getFullYear","push","index","className","id","style","width","textAlign","src","urlToImage","padding","height","href","url","color","fontSize","title","description","category","author","React","Component","Main","handleChoose","event","allData","state","target","value","setState","entertainment","categoryValue","science","sports","business","data","substring","length","sort","a","b","oneData","error","fetchAPI","count","categoryArray","count2","fetch","then","response","json","newData","console","log","catch","alert","display","alignItems","flexDirection","icon","faThumbsUp","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1380c742.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Newscontent extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        //處理新的時間字串\r\n      }\r\n\r\n  render() {\r\n    const  articles  = this.props.articles;\r\n    let timeArray =[];\r\n    articles.map(function(val) { \r\n        var currentDate = val.publishedAt; \r\n        currentDate = JSON.stringify(currentDate);\r\n        currentDate = new Date(JSON.parse(currentDate));\r\n        //時間轉成台灣時間\r\n        var MM = ('0'+ (currentDate.getMonth()+1)).substr(-2);\r\n        var dd = ('0'+ currentDate.getDate()).substr(-2);\r\n        var h = ('0'+ currentDate.getHours()).substr(-2);\r\n        var m = ('0'+ currentDate.getMinutes()).substr(-2);\r\n        var s = ('0'+ currentDate.getSeconds()).substr(-2);\r\n        let Time = currentDate.getFullYear()+\"年\"+MM+\"月\"+dd+\"日\";\r\n        Time = Time + h+\":\"+m+\":\"+s;\r\n        timeArray.push(Time);\r\n    }); \r\n    const listItems = articles.map((val,index) =>\r\n      <div className=\"list_css\" id={index}>\r\n        <div style={{width:\"40%\",textAlign:\"center\"}}>\r\n          <img  src={val.urlToImage} style={{padding:\"0.5vh\"}} width=\"70%\" height=\"70%\"/>\r\n        </div>\r\n        <div className=\"content\">\r\n          <div style={{textAlign:\"center\"}}>\r\n            <a href={val.url} style={{color:\"black\",fontSize:\"1.3vw\"}} >{val.title}</a>\r\n          </div><br/>\r\n          <div>{val.description}</div><br/>\r\n          <div style={{color:\"#CA8EFF\",textAlign:\"right\"}}>({val.category})</div>\r\n          <div style={{color:\"#FF7575\",textAlign:\"right\"}}>{val.author!=null?val.author+\" 報導\" :''}</div>\r\n          <div style={{color:\"#0066CC\",textAlign:\"right\"}}>{timeArray[index]}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n    return (\r\n        listItems\r\n    )\r\n  }\r\n}\r\nexport default Newscontent;\r\n","import React from 'react';\nimport Newscontent  from './Newscontent';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faThumbsUp } from '@fortawesome/free-solid-svg-icons';\n\nclass Main extends React.Component{\n  //建構子\n  constructor(props) {\n    super(props);\n    this.state={allData:[],articles:[],oneData:[],categoryValue:\"entertainment\",error:null}\n    //擷取所有的結果(所有類別的資料)\n    this.fetchAPI();\n  }\n\n  fetchAPI(){\n      let count = 0;\n      let allData =\"\";\n      const categoryArray = [\"entertainment\",\"science\",\"sports\",\"business\"];\n      //跑所有的數據\n      categoryArray.map((val,index) =>{\n        let count2 = 0;\n        let oneData = \"\";\n        const category = val;\n        const API = 'https://newsapi.org/v2/top-headlines?country=tw&';\n        const DEFAULT_QUERY ='category='+val;\n        const APIkey = '&apiKey=b6a64708a32040ec9761ccf7a11c83a5';\n        //加入json物件(fetch順序結果不會照著index跑，透由count檢查最後結果的json物件)\n        fetch(API + DEFAULT_QUERY+APIkey)\n          .then(response => response.json())\n          .then(data => {\n            count++;\n            //加入類別JSON格式\n            data.articles.map((val,index) =>{\n                count2++;\n                const newData = \"{\"+'\"category\"'+\":\"+'\"'+\"\"+category+'\",'+JSON.stringify(val).substring(1,JSON.stringify(val).length)+\",\";\n                oneData = oneData +newData;\n                if(count2 == data.articles.length-1)\n                { \n                  oneData = \"[\"+oneData.substring(0,oneData.length-1);\n                  this.setState({oneData:oneData});\n                }\n              });\n            //加入各類的JSON檔案\n            allData =allData+'\"'+val+'\"'+':'+this.state.oneData+'],';\n            if(count==categoryArray.length){\n              allData=allData.substring(0,allData.length-1)\n              allData = \"{\"+allData+\"}\";\n              allData =JSON.parse(allData);\n              console.log(allData);\n              this.setState({allData:allData,articles:allData.entertainment});\n            }\n            })\n            .catch(error => this.setState({error})); //處理錯誤問題\n      }); \n  }\n\n  //選擇不同類輸出不同類擷取結果\n  handleChoose = event => {\n    const allData = this.state.allData;\n    if(event.target.value==\"entertainment\"){\n        this.setState({articles:allData.entertainment,categoryValue:\"entertainment\"});\n    }else if(event.target.value==\"science\"){\n        this.setState({articles:allData.science,categoryValue:\"science\"});\n    }else if(event.target.value==\"sports\"){\n        this.setState({articles:allData.sports,categoryValue:\"sports\"});\n    }else if(event.target.value==\"business\"){\n        this.setState({articles:allData.business,categoryValue:\"business\"});\n    }else{\n         //所有的類別，並按照時間進行排列\n        const entertainment =  JSON.stringify(allData.entertainment);\n        const science =  JSON.stringify(allData.science);\n        const sports =  JSON.stringify(allData.sports);\n        const business =  JSON.stringify(allData.business);\n        let data = entertainment.substring(0,entertainment.length-1)+\",\"+sports.substring(1,sports.length-1)+\",\"+science.substring(1,science.length-1)+\",\"+business.substring(1,business.length);\n        data = JSON.parse(data);\n        data.sort(function(a,b){ //時間順序排列(最新到最舊)\n            return Date.parse(b.publishedAt) - Date.parse(a.publishedAt);\n        });\n        this.setState({articles:data});\n    }\n  }\n\n\n  render() {\n    if (this.state.error) {\n      alert(\"擷取API 發生錯誤!!\");\n    }\n    return (\n      <div className=\"MainBlock\">\n        <div id=\"topBlock\">\n          <div className=\"topText\">Taiwan Top Headlines!</div>\n        </div>\n        <div style={{display:\"flex\", alignItems:\"center\",flexDirection:\"column\"}}>\n          <div style={{display:\"flex\",padding:\"2.5vh\"}}>\n            <FontAwesomeIcon icon={faThumbsUp} style={{fontSize:\"1.5vw\"}}/>&nbsp;\n            <div style={{color:\"#FF9797\",fontSize:\"1.5vw\"}}>請選擇新聞類別:&nbsp;</div>\n            <div className=\"box\">\n              <select onChange={this.handleChoose}> \n                <option value=\"entertainment\">entertainment</option>\n　              <option value=\"science\">science</option>\n　              <option value=\"sports\">sports</option>\n                <option value=\"business\">business</option>\n                <option value=\"all\">all</option>\n              </select>\n            </div>\n          </div>\n        </div>\n        <Newscontent articles={this.state.articles}/>\n      <div>\n      </div>\n  </div>\n    )\n  }\n}\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}